#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define LEN sizeof(struct student)
struct student
{
	long num;
	char name[20];
	float score;
	struct student* next;
};
int n;
struct student* creat(void)
{
	struct student*p1, *p2, *head;
	n = 0;
	head = NULL;
	p1 = p2 = (struct student*)malloc(LEN);
	printf("Please input the information of student 1:\n");
	scanf("%ld", &p1->num);
	scanf("%s", p1->name);
	scanf("%f", &p1->score);
	printf("\n");
	while (p1->num != 0)
	{
		n = n + 1;
		if (n == 1) head = p1;
		else
			p2->next = p1;
		p2 = p1;
		p1 = (struct student*)malloc(LEN);
		printf("Please input the information of student %d\n", n + 1);
		scanf("%ld", &p1->num);
		scanf("%s", p1->name);
		scanf("%f", &p1->score);
		printf("\n");
	}
	p2->next = NULL;
	return (head);
}
int main()
{
	struct student* creat(void);
	float av(struct student*pt, struct student*max, struct student*min);
	printf("This is a program designed by InnchMahh.\n");
	struct student*pt;
	struct student max, min;
	float avg;
	pt = creat();
	avg = av(pt, &max, &min);
	printf("\n\nR E S U L T\n");
	printf("The top one:\nNO:%ld\nName:%s\nScore:%f\n", max.num, max.name, max.score);
	printf("The last one:\nNO:%ld\nName:%s\nScore:%f\n", min.num, min.name, min.score);
	printf("The average: %f\n", avg);
	system("pause");
	return 0;
}
float av(struct student*pt, struct student*max, struct student*min)
{
	int i;
	struct student*p;
	float avg, sum = 0;
	p = pt;
	max->num = p->num;
	strcpy(max->name, p->name);
	max->score = p->score;
	min->num = p->num;
	strcpy(min->name, p->name);
	min->score = p->score;
	if (pt->next != 0)
	{
		do
		{
			p = p->next;
			if (max->score <= p->score)
			{
				max->num = p->num;
				strcpy(max->name, p->name);
				max->score = p->score;
			}
		} while (p->next != 0);
	}
	p = pt;
	if (pt->next != 0)
	{
		do
		{
			p = p->next;
			if (min->score >= p->score)
			{
				min->num = p->num;
				strcpy(min->name, p->name);
				min->score = p->score;
			}
		} while (p->next != 0);
	}
	p = pt;
	for (i = 1; i <= n; i++)
	{
		sum = sum + (p->score);
		p = p->next;
	}
	avg = (sum / n);
	return(avg);
}
